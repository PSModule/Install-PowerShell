name: Install PowerShell
description: Install a specific version of PowerShell Core on any GitHub runner (Linux, macOS, Windows). Handles install, downgrade, or forced reinstall.
author: PSModule
branding:
  icon: terminal
  color: purple

inputs:
  Version:
    description: Exact PowerShell version to install (e.g. 7.4.1)
    required: true
  Reinstall:
    description: Set to 'true' to uninstall & reinstall even when the exact version is already present.
    default: 'false'

runs:
  using: composite
  steps:
    - name: Install PowerShell (Linux)
      if: runner.os == 'Linux'
      env:
        REQUESTED_VERSION: ${{ inputs.Version }}
        REINSTALL: ${{ inputs.Reinstall }}
      shell: bash
      run: |
        set -e

        echo "Detecting existing PowerShell on Linux..."
        DETECTED_VERSION=$(pwsh -NoLogo -NoProfile -Command '$PSVersionTable.PSVersion.ToString()' 2>/dev/null || true)
        echo "Detected version: ${DETECTED_VERSION:-<none>}"
        echo "Requested version: $REQUESTED_VERSION"
        echo "Reinstall flag: $REINSTALL"

        if [[ -z "$DETECTED_VERSION" ]]; then
          DECISION="install"
        elif [[ "$DETECTED_VERSION" == "$REQUESTED_VERSION" ]]; then
          if [[ "$REINSTALL" == "true" ]]; then DECISION="reinstall"; else DECISION="skip"; fi
        else
          DECISION="uninstall-install"  # covers downgrade or upgrade
        fi
        echo "Decision: $DECISION"

        if [[ "$DECISION" == "skip" ]]; then
          echo "Skipping installation on Linux (exact version present)."
          exit 0
        fi

        # -------------------------------------------------------------------------------------------------
        # Debian/Ubuntu installation
        # -------------------------------------------------------------------------------------------------
        if command -v apt-get >/dev/null; then
          echo "Using APT package manager (Debian/Ubuntu)..."

          echo "Ensuring Microsoft package repo is configured..."
          if ! grep -q "packages.microsoft.com" /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null; then
            wget -qO- https://packages.microsoft.com/keys/microsoft.asc | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc > /dev/null
            DIST_CODENAME=$(lsb_release -cs)
            sudo add-apt-repository "deb [arch=$(dpkg --print-architecture)] https://packages.microsoft.com/ubuntu/$DIST_CODENAME/prod $DIST_CODENAME main"
          fi

          echo "Updating package index..."
          sudo apt-get update -y

          if [[ "$DECISION" != "install" ]]; then
            echo "Removing any existing PowerShell packages..."
            sudo apt-get remove -y powershell || true
            sudo apt-get autoremove -y || true
          fi

          echo "Attempting to install exact version $REQUESTED_VERSION from repo..."
          EXACT_PKG=$(apt-cache madison powershell | awk '{print $3}' | grep -E "^${REQUESTED_VERSION}(-|$)" | head -n1 || true)
          if [[ -n "$EXACT_PKG" ]]; then
            sudo apt-get install -y powershell=$EXACT_PKG
          else
            echo "Exact version not found in repo; downloading .deb package from GitHub release..."
            ARCH=$(dpkg --print-architecture)
            DEB_NAME="powershell_${REQUESTED_VERSION}-1.deb_${ARCH}.deb"
            URL="https://github.com/PowerShell/PowerShell/releases/download/v${REQUESTED_VERSION}/${DEB_NAME}"
            echo "Fetching $URL"
            wget -q "$URL" -O "$DEB_NAME"
            sudo dpkg -i "$DEB_NAME" || sudo apt-get -f install -y
          fi

        else
          echo "Unsupported Linux distribution (no apt-get). PowerShell install via package manager not implemented."
          exit 1
        fi

    - name: Install PowerShell (macOS)
      if: runner.os == 'macOS'
      env:
        REQUESTED_VERSION: ${{ inputs.Version }}
        REINSTALL: ${{ inputs.Reinstall }}
      shell: bash
      run: |
        set -e

        echo "Detecting existing PowerShell on macOS..."
        DETECTED_VERSION=$(pwsh -NoLogo -NoProfile -Command '$PSVersionTable.PSVersion.ToString()' 2>/dev/null || true)
        echo "Detected version: ${DETECTED_VERSION:-<none>}"
        echo "Requested version: $REQUESTED_VERSION"
        echo "Reinstall flag: $REINSTALL"

        if [[ -z "$DETECTED_VERSION" ]]; then
          DECISION="install"
        elif [[ "$DETECTED_VERSION" == "$REQUESTED_VERSION" ]]; then
          if [[ "$REINSTALL" == "true" ]]; then DECISION="reinstall"; else DECISION="skip"; fi
        else
          DECISION="uninstall-install"
        fi
        echo "Decision: $DECISION"

        if [[ "$DECISION" == "skip" ]]; then
          echo "Skipping installation on macOS (exact version present)."
        else
          echo "Uninstalling any existing PowerShell..."
          brew uninstall --ignore-dependencies --force powershell || true

          echo "Attempting to install PowerShell $REQUESTED_VERSION via Homebrew..."
          if brew info --cask powershell@$REQUESTED_VERSION >/dev/null 2>&1; then
            brew install --cask powershell@$REQUESTED_VERSION
          else
            echo "Exact version not available via Homebrew; downloading .pkg from GitHub release..."
            ARCH=$(uname -m)
            if [[ "$ARCH" == "arm64" ]]; then PKG_NAME="powershell-${REQUESTED_VERSION}-osx-arm64.pkg"; else PKG_NAME="powershell-${REQUESTED_VERSION}-osx-x64.pkg"; fi
            URL="https://github.com/PowerShell/PowerShell/releases/download/v${REQUESTED_VERSION}/${PKG_NAME}"
            echo "Fetching $URL"
            curl -sSL "$URL" -o "$PKG_NAME"
            sudo installer -pkg "$PKG_NAME" -target /
          fi
        fi

    - name: Install PowerShell (Windows)
      if: runner.os == 'Windows'
      env:
        REQUESTED_VERSION: ${{ inputs.Version }}
        REINSTALL: ${{ inputs.Reinstall }}
      shell: powershell
      run: |
        Write-Host "Detecting existing PowerShell on Windows..."
        try {
          $detected = (& pwsh -NoLogo -NoProfile -Command '$PSVersionTable.PSVersion.ToString()')
        } catch {
          $detected = $null
        }

        $detectedDisplay = if ([string]::IsNullOrWhiteSpace($detected)) { '<none>' } else { $detected }
        Write-Host "Detected version: $detectedDisplay"
        Write-Host "Requested version: $env:REQUESTED_VERSION"
        Write-Host "Reinstall flag: $env:REINSTALL"

        if (-not $detected) {
          $decision = 'install'
        } elseif ($detected -eq $env:REQUESTED_VERSION) {
          if ($env:REINSTALL -eq 'true') {
            $decision = 'reinstall'
          } else {
            $decision = 'skip'
          }
        } else {
          $decision = 'uninstall-install'
        }
        Write-Host "Decision: $decision"

        if ($decision -eq 'skip') {
          Write-Host 'Skipping installation on Windows (exact version present).'
        } else {
          Write-Host 'Removing existing PowerShell installation (if any)...'
          $pwshProducts = Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -like 'PowerShell*' }
          foreach ($p in $pwshProducts) {
            Write-Host "Uninstalling $($p.Name)..."
            Start-Process msiexec.exe -ArgumentList '/x', $p.IdentifyingNumber, '/quiet', '/norestart' -Wait
          }

          Write-Host "Installing PowerShell $env:REQUESTED_VERSION..."
          $msi = "PowerShell-$($env:REQUESTED_VERSION)-win-x64.msi"
          $url = "https://github.com/PowerShell/PowerShell/releases/download/v$($env:REQUESTED_VERSION)/$msi"
          Invoke-WebRequest -Uri $url -OutFile $msi -UseBasicParsing
          Start-Process msiexec.exe -ArgumentList '/i', $msi, '/quiet', '/norestart' -Wait
        }
