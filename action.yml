name: Install-PowerShell
description: Install PowerShell
author: PSModule
branding:
  icon: upload-cloud
  color: white

inputs:
  Version:
    description: The version of PowerShell to install, e.g., 7.4.0 or 7.5.0. If not provided, the latest version is installed.
    default: ''

runs:
  using: composite
  steps:
    - name: Install PowerShell on Windows
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        $version = '${{ inputs.Version }}'

        # Get version to install
        if ([string]::IsNullOrWhiteSpace($version)) {
          $releaseInfo = Invoke-RestMethod -Uri 'https://api.github.com/repos/PowerShell/PowerShell/releases/latest'
          $version = $releaseInfo.tag_name.Trim('v')
          Write-Host "Latest PowerShell version: $version"
        } else {
          $version = $version.TrimStart('v')
          Write-Host "Installing specified PowerShell version: $version"
        }

        # Function to compare versions
        function Compare-Versions {
          param(
            [string]$CurrentVersion,
            [string]$TargetVersion
          )

          $currentParts = $CurrentVersion.Split('.') + @(0,0,0)
          $targetParts = $TargetVersion.Split('.') + @(0,0,0)

          for ($i = 0; $i -lt 3; $i++) {
            $currentPart = [int]$currentParts[$i]
            $targetPart = [int]$targetParts[$i]

            if ($currentPart -lt $targetPart) { return -1 }
            if ($currentPart -gt $targetPart) { return 1 }
          }
          return 0
        }

        # Check existing installation
        $needToInstall = $true
        try {
          if (Get-Command pwsh -ErrorAction SilentlyContinue) {
            $currentVersion = & pwsh -Command '$PSVersionTable.PSVersion.ToString()'
            Write-Host "Current PowerShell version: $currentVersion"

            $comparison = Compare-Versions -CurrentVersion $currentVersion -TargetVersion $version
            if ($comparison -ge 0) {
              Write-Host "Current version meets or exceeds target version. Skipping installation."
              $needToInstall = $false
            } else {
              Write-Host "Current version is lower than target version. Will upgrade."
            }
          }
        } catch {
          Write-Host "Error checking current version: $_"
        }

        if ($needToInstall) {
          try {
            $msiName = "PowerShell-$version-win-x64.msi"
            $downloadUrl = "https://github.com/PowerShell/PowerShell/releases/download/v$version/$msiName"

            Write-Host "Downloading from $downloadUrl"
            Invoke-WebRequest -Uri $downloadUrl -OutFile $msiName -ErrorAction Stop

            Write-Host "Installing PowerShell $version"
            Start-Process msiexec.exe -ArgumentList "/i", $msiName, "/quiet", "/norestart" -Wait -ErrorAction Stop

            if (Test-Path "$env:ProgramFiles\PowerShell\7\pwsh.exe") {
              Write-Host "Installation successful"
              & "$env:ProgramFiles\PowerShell\7\pwsh.exe" -Command '$PSVersionTable'
            } else {
              throw "Installation failed - pwsh.exe not found"
            }
          } catch {
            Write-Error "Installation failed: $_"
            exit 1
          }
        }

    - name: Install PowerShell on Ubuntu
      if: runner.os == 'Linux'
      shell: bash
      run: |
        version='${{ inputs.Version }}'

        # Version comparison functions
        get_version_parts() {
          local version=${1#v}
          IFS='.' read -ra parts <<< "$version"
          echo "${parts[0]:-0} ${parts[1]:-0} ${parts[2]:-0}"
        }

        compare_versions() {
          local current_parts=($(get_version_parts "$1"))
          local target_parts=($(get_version_parts "$2"))

          for i in {0..2}; do
            if (( current_parts[i] < target_parts[i] )); then return 1; fi
            if (( current_parts[i] > target_parts[i] )); then return 2; fi
          done
          return 0
        }

        # Get version if not specified
        if [ -z "$version" ]; then
          version=$(curl -s https://api.github.com/repos/PowerShell/PowerShell/releases/latest | grep 'tag_name' | cut -d '"' -f 4)
          echo "Latest PowerShell version: $version"
        fi

        clean_version=${version#v}
        echo "Installing PowerShell version: $clean_version"

        # Check existing installation
        need_to_install=true
        if command -v pwsh &> /dev/null; then
          current_version=$(pwsh -c '$PSVersionTable.PSVersion.ToString()' | tr -d '\r\n')
          echo "Current PowerShell version: $current_version"

          compare_versions "$current_version" "$clean_version"
          case $? in
            0) echo "Versions equal - skipping install"; need_to_install=false ;;
            2) echo "Current version higher - skipping install"; need_to_install=false ;;
            1) echo "Current version lower - will upgrade" ;;
          esac
        fi

        if [ "$need_to_install" = true ]; then
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https

          # Try multiple package formats
          pkg_found=false
          for pkg in "powershell_${clean_version}-1.deb_amd64.deb" "powershell-${clean_version}-linux-x64.deb"; do
            if wget "https://github.com/PowerShell/PowerShell/releases/download/v$clean_version/$pkg"; then
              pkg_found=true
              sudo dpkg -i "$pkg"
              sudo apt-get install -f
              break
            fi
          done

          if [ "$pkg_found" = false ]; then
            echo "ERROR: Failed to download package"
            exit 1
          fi

          echo "Installation successful:"
          pwsh -c '$PSVersionTable'
        fi

    - name: Install PowerShell on macOS
      if: runner.os == 'macOS'
      shell: bash
      run: |
        version='${{ inputs.Version }}'

        # Version comparison functions
        get_version_parts() {
          local version=${1#v}
          IFS='.' read -ra parts <<< "$version"
          echo "${parts[0]:-0} ${parts[1]:-0} ${parts[2]:-0}"
        }

        compare_versions() {
          local current_parts=($(get_version_parts "$1"))
          local target_parts=($(get_version_parts "$2"))

          for i in {0..2}; do
            if (( current_parts[i] < target_parts[i] )); then return 1; fi
            if (( current_parts[i] > target_parts[i] )); then return 2; fi
          done
          return 0
        }

        # Get version if not specified
        if [ -z "$version" ]; then
          version=$(curl -s https://api.github.com/repos/PowerShell/PowerShell/releases/latest | grep 'tag_name' | cut -d '"' -f 4)
          echo "Latest PowerShell version: $version"
        fi

        clean_version=${version#v}
        echo "Installing PowerShell version: $clean_version"

        # Check existing installation
        need_to_install=true
        if [ -f "/usr/local/bin/pwsh" ]; then
          current_version=$(/usr/local/bin/pwsh -c '$PSVersionTable.PSVersion.ToString()' | tr -d '\r\n')
          echo "Current PowerShell version: $current_version"

          compare_versions "$current_version" "$clean_version"
          case $? in
            0) echo "Versions equal - skipping install"; need_to_install=false ;;
            2) echo "Current version higher - skipping install"; need_to_install=false ;;
            1) echo "Current version lower - will upgrade" ;;
          esac
        fi

        if [ "$need_to_install" = true ]; then
          arch=$(uname -m)
          case $arch in
            arm64) pkg="powershell-${clean_version}-osx-arm64.pkg" ;;
            *)     pkg="powershell-${clean_version}-osx-x64.pkg" ;;
          esac

          if ! curl -LO "https://github.com/PowerShell/PowerShell/releases/download/v$clean_version/$pkg"; then
            echo "ERROR: Failed to download package"
            exit 1
          fi

          sudo installer -pkg "$pkg" -target /

          echo "Installation successful:"
          /usr/local/bin/pwsh -c '$PSVersionTable'
        fi
