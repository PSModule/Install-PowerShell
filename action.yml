name: Install PowerShell
description: |
  Install a specific version —or the latest stable version— of PowerShell Core
  on any GitHub runner (Linux, macOS, Windows).
  Skips the install if the requested version is already present.
author: PSModule
branding:
  icon: terminal
  color: purple

inputs:
  Version:
    description: |
      PowerShell version to install (e.g. `7.4.1`).
      Defaults to install the latest stable release.
    required: false
    default: 'latest'

runs:
  using: composite
  steps:
    - name: Install PowerShell (Linux)
      if: runner.os == 'Linux'
      shell: bash
      env:
        REQUESTED_VERSION: ${{ inputs.Version }}
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        set -e

        echo "Requested version: [$REQUESTED_VERSION]"

        # Only resolve to latest version if explicitly set to 'latest' (case-insensitive)
        case "${REQUESTED_VERSION:-}" in
            [Ll][Aa][Tt][Ee][Ss][Tt])
                REQUESTED_VERSION=$(
                  curl -s -f \
                    -H "Accept: application/vnd.github+json" \
                    -H "Authorization: Bearer $GITHUB_TOKEN" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    https://api.github.com/repos/PowerShell/PowerShell/releases/latest |
                    jq -r '.tag_name' | sed 's/^v//'
                )
                echo "Latest stable PowerShell release detected: $REQUESTED_VERSION"
                ;;
            "")
                echo "Error: Version input is required (or use 'latest')"
                exit 1
                ;;
        esac

        DETECTED_VERSION=$(pwsh -NoLogo -NoProfile -Command '$PSVersionTable.PSVersion.ToString()' 2>/dev/null || true)
        if [[ "$DETECTED_VERSION" == "$REQUESTED_VERSION" ]]; then
          echo "PowerShell $DETECTED_VERSION already installed. Skipping."
          exit 0
        fi

        # Determine Linux distribution type
        ARCH=$(dpkg --print-architecture 2>/dev/null || rpm --eval '%{_arch}' 2>/dev/null || echo "x86_64")

        if command -v apt-get >/dev/null || command -v dpkg >/dev/null; then
          # Debian/Ubuntu based
          echo "Detected Debian/Ubuntu based system..."
          DEB_NAME="powershell_${REQUESTED_VERSION}-1.deb_${ARCH}.deb"
          URL="https://github.com/PowerShell/PowerShell/releases/download/v${REQUESTED_VERSION}/${DEB_NAME}"
          echo "Downloading from: $URL"
          wget -q "$URL" -O "$DEB_NAME"
          sudo dpkg -i "$DEB_NAME" || sudo apt-get -f install -y
        elif command -v rpm >/dev/null; then
          # RHEL/Fedora/CentOS based
          echo "Detected RHEL/Fedora/CentOS based system..."

          if [[ "$ARCH" == "aarch64" ]]; then
            RPM_NAME="powershell-${REQUESTED_VERSION}-1.rh.${ARCH}.rpm"
          else
            RPM_NAME="powershell-${REQUESTED_VERSION}-1.rh.x86_64.rpm"
          fi

          URL="https://github.com/PowerShell/PowerShell/releases/download/v${REQUESTED_VERSION}/${RPM_NAME}"
          echo "Downloading from: $URL"
          wget -q "$URL" -O "$RPM_NAME"
          sudo rpm -i "$RPM_NAME" || sudo yum install -y "$RPM_NAME"
        else
          echo "Unsupported Linux distribution. Cannot determine package format."
          exit 1
        fi

    - name: Install PowerShell (macOS)
      if: runner.os == 'macOS'
      shell: bash
      env:
        REQUESTED_VERSION: ${{ inputs.Version }}
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        set -e

        echo "Requested version: [$REQUESTED_VERSION]"

        # Only resolve to latest version if explicitly set to 'latest' (case-insensitive)
        case "${REQUESTED_VERSION:-}" in
            [Ll][Aa][Tt][Ee][Ss][Tt])
                REQUESTED_VERSION=$(
                  curl -s -f \
                    -H "Accept: application/vnd.github+json" \
                    -H "Authorization: Bearer $GITHUB_TOKEN" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    https://api.github.com/repos/PowerShell/PowerShell/releases/latest |
                    jq -r '.tag_name' | sed 's/^v//'
                )
                echo "Latest stable PowerShell release detected: $REQUESTED_VERSION"
                ;;
            "")
                echo "Error: Version input is required (or use 'latest')"
                exit 1
                ;;
        esac

        DETECTED_VERSION=$(pwsh -NoLogo -NoProfile -Command '$PSVersionTable.PSVersion.ToString()' 2>/dev/null || true)
        if [[ "$DETECTED_VERSION" == "$REQUESTED_VERSION" ]]; then
          echo "PowerShell $DETECTED_VERSION already installed. Skipping."
          exit 0
        fi

        # Determine architecture and download appropriate package
        ARCH=$(uname -m)
        case "$ARCH" in
          "arm64") PKG_NAME="powershell-${REQUESTED_VERSION}-osx-arm64.pkg" ;;
          *)       PKG_NAME="powershell-${REQUESTED_VERSION}-osx-x64.pkg" ;;
        esac

        URL="https://github.com/PowerShell/PowerShell/releases/download/v${REQUESTED_VERSION}/${PKG_NAME}"
        echo "Downloading from: $URL"
        if ! curl -sSL "$URL" -o "$PKG_NAME"; then
          echo "Error: Failed to download PowerShell package"
          exit 1
        fi
        sudo installer -pkg "$PKG_NAME" -target /

    - name: Install PowerShell (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      env:
        REQUESTED_VERSION: ${{ inputs.Version }}
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        Write-Host  "Requested version: [$REQUESTED_VERSION]"
        # Only resolve to latest version if explicitly set to 'latest' (case-insensitive)
        $req = $env:REQUESTED_VERSION
        if ($req -and $req.Trim().ToLower() -eq 'latest') {
            $latest = (
              Invoke-RestMethod -Uri 'https://api.github.com/repos/PowerShell/PowerShell/releases/latest' `
              -Headers @{
                'Accept' = 'application/vnd.github+json'
                'Authorization' = "Bearer $($env:GITHUB_TOKEN)"
                'X-GitHub-Api-Version' = '2022-11-28'
              }
            ).tag_name.TrimStart('v')
            Write-Host "Latest stable PowerShell release detected: $latest"
            $env:REQUESTED_VERSION = $latest
        } elseif ([string]::IsNullOrWhiteSpace($req)) {
            Write-Host "Error: Version input is required (or use 'latest')"
            exit 1
        }

        try {
          $detected = (pwsh -NoLogo -NoProfile -Command '$PSVersionTable.PSVersion.ToString()')
        } catch {
          $detected = $null
        }

        Write-Host "Detected PowerShell version: $detected"
        Write-Host "Requested PowerShell version: $env:REQUESTED_VERSION"

        if ($detected -eq $env:REQUESTED_VERSION) {
          Write-Host "PowerShell $detected already installed. Skipping."
          exit 0
        }

        $msi = "PowerShell-$($env:REQUESTED_VERSION)-win-x64.msi"
        $url = "https://github.com/PowerShell/PowerShell/releases/download/v$($env:REQUESTED_VERSION)/$msi"
        Invoke-WebRequest -Uri $url -OutFile $msi -UseBasicParsing
        Start-Process msiexec.exe -ArgumentList '/i', $msi, '/quiet', '/norestart' -Wait
