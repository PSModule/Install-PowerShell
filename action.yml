name: Install-PowerShell
description: Install PowerShell
author: PSModule
branding:
  icon: upload-cloud
  color: white

inputs:
  Version:
    description: The version of PowerShell to install, e.g., 7.4.0 or 7.5.0. If not provided, the latest version is installed.
    default: ''

runs:
  using: composite
  steps:
    - name: Install PowerShell on Windows
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        $version = '${{ inputs.version }}'

        # Try to remove existing PowerShell installation
        try {
          # Find existing PowerShell installations to remove
          Get-Package -Name "PowerShell*" -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "Uninstalling $($_.Name) version $($_.Version)"
            Uninstall-Package -Name $_.Name -Force -ErrorAction SilentlyContinue
          }
        } catch {
          Write-Host "Error removing existing PowerShell: $_"
        }

        # Get the version to install
        if ([string]::IsNullOrWhiteSpace($version)) {
          # Get latest version from GitHub API
          $releaseInfo = Invoke-RestMethod -Uri 'https://api.github.com/repos/PowerShell/PowerShell/releases/latest'
          $version = $releaseInfo.tag_name.Trim('v')
          Write-Host "Latest PowerShell version: $version"
        } else {
          Write-Host "Installing specified PowerShell version: $version"
        }

        # Download and install PowerShell
        $msiName = "PowerShell-$version-win-x64.msi"
        $downloadUrl = "https://github.com/PowerShell/PowerShell/releases/download/v$version/$msiName"

        Write-Host "Downloading from $downloadUrl"
        Invoke-WebRequest -Uri $downloadUrl -OutFile $msiName

        Write-Host "Installing PowerShell $version"
        Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", $msiName, "/quiet", "/norestart" -Wait

        # Verify installation
        $pwshPath = "$env:ProgramFiles\PowerShell\7\pwsh.exe"
        if (Test-Path $pwshPath) {
          Write-Host "PowerShell installed successfully:"
          & $pwshPath -Command '$PSVersionTable'
        } else {
          Write-Error "PowerShell installation failed. Could not find $pwshPath"
          exit 1
        }

    - name: Install PowerShell on Ubuntu
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get remove powershell -y
        version='${{ inputs.version }}'
        if [ -z "$version" ]; then
          version=$(curl -s https://api.github.com/repos/PowerShell/PowerShell/releases/latest | grep 'tag_name' | cut -d '"' -f 4)
        else
          version="v$version"
        fi
        wget https://github.com/PowerShell/PowerShell/releases/download/$version/powershell_${version#v}-1.deb_amd64.deb
        sudo dpkg -i powershell_${version#v}-1.deb_amd64.deb
        sudo apt-get install -f

    - name: Install PowerShell on macOS
      if: runner.os == 'macOS'
      shell: bash
      run: |
        # Clean up existing PowerShell installation
        sudo rm -rf /usr/local/microsoft/powershell

        # Get version information
        version='${{ inputs.version }}'
        if [ -z "$version" ]; then
          # Get latest version if not specified
          version=$(curl -s https://api.github.com/repos/PowerShell/PowerShell/releases/latest | grep 'tag_name' | cut -d '"' -f 4)
          echo "Latest PowerShell version: $version"
        else
          version="v$version"
          echo "Installing specified PowerShell version: $version"
        fi

        # The version without 'v' prefix
        clean_version=${version#v}

        # Try the different naming patterns for the macOS package
        pkg_patterns=(
          "powershell-$clean_version-osx-x64.pkg"
          "powershell-$clean_version-osx-arm64.pkg"
          "powershell-$clean_version-osx.pkg"
        )

        # Determine if running on Apple Silicon or Intel
        if [ "$(uname -m)" = "arm64" ]; then
          echo "Detected Apple Silicon (ARM64)"
          arch="arm64"
        else
          echo "Detected Intel CPU (x64)"
          arch="x64"
        fi

        # Try to download the appropriate package based on architecture
        download_success=false

        for pkg_name in "${pkg_patterns[@]}"; do
          echo "Trying to download $pkg_name..."
          url="https://github.com/PowerShell/PowerShell/releases/download/$version/$pkg_name"

          # Try to download the file
          if curl -LO $url --fail; then
            echo "Successfully downloaded $pkg_name"
            download_success=true
            break
          else
            echo "Failed to download $pkg_name"
          fi
        done

        if [ "$download_success" = false ]; then
          echo "ERROR: Could not download PowerShell package for macOS. Please check version and available packages."
          exit 1
        fi

        # Verify the file exists before installation
        if [ -f "$pkg_name" ]; then
          echo "Installing PowerShell package: $pkg_name"
          sudo installer -pkg "$pkg_name" -target /

          # Verify the installation
          if [ -f "/usr/local/bin/pwsh" ]; then
            echo "PowerShell installed successfully:"
            /usr/local/bin/pwsh -Command '$PSVersionTable'
          else
            echo "ERROR: PowerShell installation failed. Could not find /usr/local/bin/pwsh"
            exit 1
          fi
        else
          echo "ERROR: Downloaded package file not found: $pkg_name"
          exit 1
        fi
