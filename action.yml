name: "Install PowerShell"
description: "Install a specific version of PowerShell Core on any GitHub runner (Linux, macOS, Windows). Handles install, downgrade, or forced reinstall with uniform logging."
author: "Your Org"
branding:
  icon: "terminal"
  color: "purple"

inputs:
  version:
    description: "Exact PowerShell version to install (e.g. 7.4.1)"
    required: true
  reinstall:
    description: "Set to 'true' to uninstall & reinstall even when the exact version is already present."
    default: "false"
  package-source:
    description: "Package source: 'microsoft' (default), 'github', or custom direct URL to the archive/MSI."
    default: "microsoft"

runs:
  using: "composite"
  steps:
    # ---------------------------------------------------------------------
    # Common environment
    # ---------------------------------------------------------------------
    - name: Set shared env
      shell: bash
      run: |
        echo "REQUESTED_VERSION=${{ inputs.version }}" >> $GITHUB_ENV
        echo "REINSTALL=${{ inputs.reinstall }}" >> $GITHUB_ENV
        echo "PACKAGE_SOURCE=${{ inputs['package-source'] }}" >> $GITHUB_ENV

    # ---------------------------------------------------------------------
    # Linux installer ------------------------------------------------------
    # ---------------------------------------------------------------------
    - name: Install PowerShell (Linux)
      if: runner.os == 'Linux'
      id: linux
      shell: bash
      run: |
        set -e
        log() { echo "::notice title=pwsh-installer::[$(date -u +'%Y-%m-%dT%H:%M:%SZ')] $1"; }

        log "Detecting existing PowerShell on Linux…"
        DETECTED_VERSION=$(pwsh -NoLogo -NoProfile -Command '$PSVersionTable.PSVersion.ToString()' 2>/dev/null || true)
        log "Detected version: ${DETECTED_VERSION:-<none>}"
        log "Requested version: $REQUESTED_VERSION"
        log "Reinstall flag: $REINSTALL"

        if [[ -z "$DETECTED_VERSION" ]]; then
          DECISION="install"
        elif [[ "$DETECTED_VERSION" == "$REQUESTED_VERSION" ]]; then
          if [[ "$REINSTALL" == "true" ]]; then DECISION="reinstall"; else DECISION="skip"; fi
        else
          DECISION="uninstall-install"  # covers downgrade or upgrade
        fi
        log "Decision: $DECISION"

        if [[ "$DECISION" == "skip" ]]; then
          log "Skipping installation on Linux (exact version present)."
        else
          log "Uninstalling any existing PowerShell…"
          sudo rm -rf /usr/local/microsoft/powershell || true
          sudo rm -f /usr/local/bin/pwsh || true
          log "Installing PowerShell $REQUESTED_VERSION…"
          curl -sSL https://aka.ms/install-powershell.sh | sudo bash -s -- -Version "$REQUESTED_VERSION" -Destination /usr/local
        fi

        PWSH_PATH=$(command -v pwsh)
        echo "PWSH_PATH=$PWSH_PATH" >> $GITHUB_ENV
        echo "PWSH_VERSION=$REQUESTED_VERSION" >> $GITHUB_ENV
        echo "pwsh-path=$PWSH_PATH" >> $GITHUB_OUTPUT
        echo "pwsh-version=$REQUESTED_VERSION" >> $GITHUB_OUTPUT

    # ---------------------------------------------------------------------
    # macOS installer ------------------------------------------------------
    # ---------------------------------------------------------------------
    - name: Install PowerShell (macOS)
      if: runner.os == 'macOS'
      id: macos
      shell: bash
      run: |
        set -e
        log() { echo "::notice title=pwsh-installer::[$(date -u +'%Y-%m-%dT%H:%M:%SZ')] $1"; }

        log "Detecting existing PowerShell on macOS…"
        DETECTED_VERSION=$(pwsh -NoLogo -NoProfile -Command '$PSVersionTable.PSVersion.ToString()' 2>/dev/null || true)
        log "Detected version: ${DETECTED_VERSION:-<none>}"
        log "Requested version: $REQUESTED_VERSION"
        log "Reinstall flag: $REINSTALL"

        if [[ -z "$DETECTED_VERSION" ]]; then
          DECISION="install"
        elif [[ "$DETECTED_VERSION" == "$REQUESTED_VERSION" ]]; then
          if [[ "$REINSTALL" == "true" ]]; then DECISION="reinstall"; else DECISION="skip"; fi
        else
          DECISION="uninstall-install"
        fi
        log "Decision: $DECISION"

        if [[ "$DECISION" == "skip" ]]; then
          log "Skipping installation on macOS (exact version present)."
        else
          log "Uninstalling any existing PowerShell…"
          sudo rm -rf /usr/local/microsoft/powershell || true
          sudo rm -f /usr/local/bin/pwsh || true
          log "Installing PowerShell $REQUESTED_VERSION…"
          curl -sSL https://aka.ms/install-powershell.sh | sudo bash -s -- -Version "$REQUESTED_VERSION" -Destination /usr/local
        fi

        PWSH_PATH=$(command -v pwsh)
        echo "PWSH_PATH=$PWSH_PATH" >> $GITHUB_ENV
        echo "PWSH_VERSION=$REQUESTED_VERSION" >> $GITHUB_ENV
        echo "pwsh-path=$PWSH_PATH" >> $GITHUB_OUTPUT
        echo "pwsh-version=$REQUESTED_VERSION" >> $GITHUB_OUTPUT

    # ---------------------------------------------------------------------
    # Windows installer ----------------------------------------------------
    # ---------------------------------------------------------------------
    - name: Install PowerShell (Windows)
      if: runner.os == 'Windows'
      id: windows
      shell: powershell
      run: |
        function Log($Message) {
          Write-Host "::notice title=pwsh-installer::[$([DateTime]::UtcNow.ToString('u'))] $Message"
        }

        Log "Detecting existing PowerShell on Windows…"
        try { $detected = (pwsh -NoLogo -NoProfile -Command "$PSVersionTable.PSVersion.ToString()") } catch { $detected = $null }
        Log "Detected version: $($detected ?? '<none>')"
        Log "Requested version: $env:REQUESTED_VERSION"
        Log "Reinstall flag: $env:REINSTALL"

        if (-not $detected) {
          $decision = 'install'
        } elseif ($detected -eq $env:REQUESTED_VERSION) {
          $decision = ($env:REINSTALL -eq 'true') ? 'reinstall' : 'skip'
        } else {
          $decision = 'uninstall-install'
        }
        Log "Decision: $decision"

        if ($decision -eq 'skip') {
          Log 'Skipping installation on Windows (exact version present).'
        }
        else {
          Log 'Uninstalling any existing PowerShell…'
          winget uninstall --id Microsoft.PowerShell -e --silent | Out-Null
          Log "Installing PowerShell $env:REQUESTED_VERSION…"
          $msi = "PowerShell-$($env:REQUESTED_VERSION)-win-x64.msi"
          $url = "https://github.com/PowerShell/PowerShell/releases/download/v$($env:REQUESTED_VERSION)/$msi"
          Invoke-WebRequest $url -OutFile $msi
          Start-Process msiexec.exe -ArgumentList "/i", $msi, "/quiet", "/norestart" -Wait
        }

        $pwshPath = (Get-Command pwsh).Source
        echo "PWSH_PATH=$pwshPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "PWSH_VERSION=$($env:REQUESTED_VERSION)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        echo "pwsh-path=$pwshPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        echo "pwsh-version=$($env:REQUESTED_VERSION)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

    # ---------------------------------------------------------------------
    # Aggregate outputs ----------------------------------------------------
    # ---------------------------------------------------------------------
    - name: Export composite outputs
      id: export
      shell: bash
      run: |
        echo "pwsh-path=$PWSH_PATH" >> $GITHUB_OUTPUT
        echo "pwsh-version=$PWSH_VERSION" >> $GITHUB_OUTPUT
      env:
        PWSH_PATH: ${{ env.PWSH_PATH }}
        PWSH_VERSION: ${{ env.PWSH_VERSION }}
