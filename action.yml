name: Install-PowerShell
description: Install PowerShell
author: PSModule
branding:
  icon: upload-cloud
  color: white

inputs:
  Version:
    description: The version of PowerShell to install, e.g., 7.4.0 or 7.5.0. If not provided, the latest version is installed.
    default: ''

runs:
  using: composite
  steps:
    - name: Install PowerShell on Windows
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        $version = '${{ inputs.Version }}'

        # Get the version to install
        if ([string]::IsNullOrWhiteSpace($version)) {
          # Get latest version from GitHub API
          $releaseInfo = Invoke-RestMethod -Uri 'https://api.github.com/repos/PowerShell/PowerShell/releases/latest'
          $version = $releaseInfo.tag_name.Trim('v')
          Write-Host "Latest PowerShell version: $version"
        } else {
          # Remove the 'v' prefix if it exists
          $version = $version.TrimStart('v')
          Write-Host "Installing specified PowerShell version: $version"
        }

        # Check if PowerShell is already installed and compare versions
        $needToInstall = $true
        try {
          $currentInstall = Get-Command pwsh -ErrorAction SilentlyContinue
          if ($currentInstall) {
            $currentVersion = & pwsh -Command '$PSVersionTable.PSVersion.ToString()'
            Write-Host "Current PowerShell version: $currentVersion"

            # Parse versions into System.Version objects for proper comparison
            try {
              $currentVersionObj = [System.Version]$currentVersion
              $targetVersionObj = [System.Version]$version

              # Compare versions
              if ($currentVersionObj -ge $targetVersionObj) {
                Write-Host "Current version $currentVersion is greater than or equal to target version $version. Skipping installation."
                $needToInstall = $false
              } else {
                Write-Host "Current version $currentVersion is lower than target version $version. Will upgrade."
              }
            } catch {
              Write-Host "Error comparing versions: $_ Will proceed with installation."
              $needToInstall = $true
            }
          } else {
            Write-Host "PowerShell Core not found. Will install version $version"
          }
        } catch {
          Write-Host "Error checking current PowerShell version: $_"
          $needToInstall = $true
        }

        if ($needToInstall) {
          try {
            # Download and install PowerShell
            $msiName = "PowerShell-$version-win-x64.msi"
            $downloadUrl = "https://github.com/PowerShell/PowerShell/releases/download/v$version/$msiName"

            Write-Host "Downloading from $downloadUrl"
            Invoke-WebRequest -Uri $downloadUrl -OutFile $msiName -ErrorAction Stop

            Write-Host "Installing PowerShell $version"
            Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", $msiName, "/quiet", "/norestart" -Wait -ErrorAction Stop

            # Verify installation
            $pwshPath = "$env:ProgramFiles\PowerShell\7\pwsh.exe"
            if (Test-Path $pwshPath) {
              Write-Host "PowerShell installed successfully:"
              & $pwshPath -Command '$PSVersionTable'
            } else {
              Write-Error "PowerShell installation failed. Could not find $pwshPath"
              exit 1
            }
          } catch {
            Write-Error "Failed to install PowerShell: $_"
            exit 1
          }
        }

    - name: Install PowerShell on Ubuntu
      if: runner.os == 'Linux'
      shell: bash
      run: |
        version='${{ inputs.Version }}'

        # Function to compare versions
        compare_versions() {
            local current=$1
            local target=$2

            # Split versions into arrays
            IFS='.' read -ra current_parts <<< "$current"
            IFS='.' read -ra target_parts <<< "$target"

            # Ensure all parts exist (default to 0 if missing)
            for i in {0..2}; do
                current_parts[$i]=${current_parts[$i]:-0}
                target_parts[$i]=${target_parts[$i]:-0}
            done

            # Compare major, minor, patch
            for i in {0..2}; do
                if [ "${current_parts[$i]}" -lt "${target_parts[$i]}" ]; then
                    return 1  # current < target
                elif [ "${current_parts[$i]}" -gt "${target_parts[$i]}" ]; then
                    return 2  # current > target
                fi
            done

            return 0  # equal
        }

        if [ -z "$version" ]; then
          # Get latest version if not specified
          version=$(curl -s https://api.github.com/repos/PowerShell/PowerShell/releases/latest | grep 'tag_name' | cut -d '"' -f 4)
          echo "Latest PowerShell version: $version"
        fi

        # Always remove 'v' prefix if present
        clean_version=${version#v}
        echo "Installing PowerShell version: $clean_version"

        # Check if PowerShell is already installed and get current version
        need_to_install=true
        if command -v pwsh &> /dev/null; then
          current_version=$(pwsh -c '$PSVersionTable.PSVersion.ToString()' | tr -d '\r\n')
          echo "Current PowerShell version: $current_version"

          compare_versions "$current_version" "$clean_version"
          case $? in
              0) echo "Versions are equal"; need_to_install=false ;;
              2) echo "Current version is higher"; need_to_install=false ;;
              1) echo "Current version is lower"; need_to_install=true ;;
          esac
        else
          echo "PowerShell is not installed. Will install version $clean_version"
        fi

        if [ "$need_to_install" = true ]; then
          # Install prerequisites
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https

          wget https://github.com/PowerShell/PowerShell/releases/download/v$clean_version/powershell_${clean_version}-1.deb_amd64.deb
          sudo dpkg -i powershell_${clean_version}-1.deb_amd64.deb
          sudo apt-get install -f

          # Verify installation
          if command -v pwsh &> /dev/null; then
            echo "PowerShell installed successfully:"
            pwsh -c '$PSVersionTable'
          else
            echo "ERROR: PowerShell installation failed."
            exit 1
          fi
        fi

    - name: Install PowerShell on macOS
      if: runner.os == 'macOS'
      shell: bash
      run: |
        version='${{ inputs.Version }}'

        # Function to compare versions
        compare_versions() {
            local current=$1
            local target=$2

            # Split versions into arrays
            IFS='.' read -ra current_parts <<< "$current"
            IFS='.' read -ra target_parts <<< "$target"

            # Ensure all parts exist (default to 0 if missing)
            for i in {0..2}; do
                current_parts[$i]=${current_parts[$i]:-0}
                target_parts[$i]=${target_parts[$i]:-0}
            done

            # Compare major, minor, patch
            for i in {0..2}; do
                if [ "${current_parts[$i]}" -lt "${target_parts[$i]}" ]; then
                    return 1  # current < target
                elif [ "${current_parts[$i]}" -gt "${target_parts[$i]}" ]; then
                    return 2  # current > target
                fi
            done

            return 0  # equal
        }

        if [ -z "$version" ]; then
          # Get latest version if not specified
          version=$(curl -s https://api.github.com/repos/PowerShell/PowerShell/releases/latest | grep 'tag_name' | cut -d '"' -f 4)
          echo "Latest PowerShell version: $version"
        fi

        # Always remove 'v' prefix if present
        clean_version=${version#v}
        echo "Installing PowerShell version: $clean_version"

        # Check if PowerShell is already installed and get current version
        need_to_install=true
        if [ -f "/usr/local/bin/pwsh" ]; then
          current_version=$(/usr/local/bin/pwsh -c '$PSVersionTable.PSVersion.ToString()' | tr -d '\r\n')
          echo "Current PowerShell version: $current_version"

          compare_versions "$current_version" "$clean_version"
          case $? in
              0) echo "Versions are equal"; need_to_install=false ;;
              2) echo "Current version is higher"; need_to_install=false ;;
              1) echo "Current version is lower"; need_to_install=true ;;
          esac
        else
          echo "PowerShell is not installed. Will install version $clean_version"
        fi

        if [ "$need_to_install" = true ]; then
          # Determine architecture
          if [ "$(uname -m)" = "arm64" ]; then
            echo "Detected Apple Silicon (ARM64)"
            pkg_name="powershell-$clean_version-osx-arm64.pkg"
          else
            echo "Detected Intel CPU (x64)"
            pkg_name="powershell-$clean_version-osx-x64.pkg"
          fi

          # Download the package
          url="https://github.com/PowerShell/PowerShell/releases/download/v$clean_version/$pkg_name"
          echo "Downloading from $url"
          curl -LO $url

          # Install the package
          sudo installer -pkg "$pkg_name" -target /

          # Verify the installation
          if [ -f "/usr/local/bin/pwsh" ]; then
            echo "PowerShell installed successfully:"
            /usr/local/bin/pwsh -Command '$PSVersionTable'
          else
            echo "ERROR: PowerShell installation failed. Could not find /usr/local/bin/pwsh"
            exit 1
          fi
        fi
