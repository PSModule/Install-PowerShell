name: Install PowerShell
description: >
  Install a specific version —or the latest stable version— of PowerShell Core
  on any GitHub runner (Linux, macOS, Windows).
  Skips the install if the requested version is already present.
author: PSModule
branding:
  icon: terminal
  color: purple

inputs:
  Version:
    description: >
      PowerShell version to install (e.g. `7.4.1`).
      Set to 'latest' to automatically install the newest stable release.
    required: false
    default: 'latest'

runs:
  using: composite
  steps:
    - name: Install PowerShell (Linux)
      if: runner.os == 'Linux'
      shell: bash
      env:
        REQUESTED_VERSION: ${{ inputs.Version }}
      run: |
        set -e

        echo "Requested version: [$REQUESTED_VERSION]"

        # Only resolve to latest version if explicitly set to 'latest' (case-insensitive)
        case "${REQUESTED_VERSION:-}" in
            [Ll][Aa][Tt][Ee][Ss][Tt])
                REQUESTED_VERSION=$(
                  curl -s https://api.github.com/repos/PowerShell/PowerShell/releases/latest |
                    grep '"tag_name"' | head -n1 |
                    sed -E 's/.*"v?([^"]+)".*/\1/'
                )
                echo "Latest stable PowerShell release detected: $REQUESTED_VERSION"
                ;;
            "")
                echo "Error: Version input is required (or use 'latest')"
                exit 1
                ;;
        esac

        DETECTED_VERSION=$(pwsh -NoLogo -NoProfile -Command '$PSVersionTable.PSVersion.ToString()' 2>/dev/null || true)
        if [[ "$DETECTED_VERSION" == "$REQUESTED_VERSION" ]]; then
          echo "PowerShell $DETECTED_VERSION already installed. Skipping."
          exit 0
        fi

        if command -v apt-get >/dev/null; then
          echo "Using APT package manager (Debian/Ubuntu)..."

          if ! grep -q "packages.microsoft.com" /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null; then
            wget -qO- https://packages.microsoft.com/keys/microsoft.asc \
              | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc > /dev/null
            DIST_CODENAME=$(lsb_release -cs)
            sudo add-apt-repository \
              "deb [arch=$(dpkg --print-architecture)] https://packages.microsoft.com/ubuntu/$DIST_CODENAME/prod $DIST_CODENAME main"
          fi

          sudo apt-get update -y
          EXACT_PKG=$(apt-cache madison powershell | awk '{print $3}' \
            | grep -E "^${REQUESTED_VERSION}(-|$)" | head -n1 || true)

          if [[ -n "$EXACT_PKG" ]]; then
            sudo apt-get install -y powershell=$EXACT_PKG
          else
            ARCH=$(dpkg --print-architecture)
            DEB_NAME="powershell_${REQUESTED_VERSION}-1.deb_${ARCH}.deb"
            URL="https://github.com/PowerShell/PowerShell/releases/download/v${REQUESTED_VERSION}/${DEB_NAME}"
            wget -q "$URL" -O "$DEB_NAME"
            sudo dpkg -i "$DEB_NAME" || sudo apt-get -f install -y
          fi
        else
          echo "Unsupported Linux distribution (no apt-get)."
          exit 1
        fi

    - name: Install PowerShell (macOS)
      if: runner.os == 'macOS'
      shell: bash
      env:
        REQUESTED_VERSION: ${{ inputs.Version }}
      run: |
        set -e

        echo "Requested version: [$REQUESTED_VERSION]"

        # Only resolve to latest version if explicitly set to 'latest' (case-insensitive)
        if [[ "${REQUESTED_VERSION,,}" == "latest" ]]; then
          REQUESTED_VERSION=$(
            curl -s https://api.github.com/repos/PowerShell/PowerShell/releases/latest |
            grep '"tag_name"' | head -n1 |
            sed -E 's/.*"v?([^"]+)".*/\1/'
          )
          echo "Latest stable PowerShell release detected: $REQUESTED_VERSION"
        fi

        # Validate REQUESTED_VERSION is not empty
        if [[ -z "${REQUESTED_VERSION}" ]]; then
          echo "Error: Could not determine a valid PowerShell version."
          exit 1
        fi

        DETECTED_VERSION=$(pwsh -NoLogo -NoProfile -Command '$PSVersionTable.PSVersion.ToString()' 2>/dev/null || true)
        if [[ "$DETECTED_VERSION" == "$REQUESTED_VERSION" ]]; then
          echo "PowerShell $DETECTED_VERSION already installed. Skipping."
          exit 0
        fi

        # Try Homebrew first
        if command -v brew >/dev/null; then
          echo "Using Homebrew package manager..."
          if [[ "${REQUESTED_VERSION}" == "latest" ]]; then
            brew install --cask powershell
          else
            brew install --cask powershell@$REQUESTED_VERSION
          fi
        else
          # Fall back to direct download
          echo "Homebrew not available, downloading directly..."
          ARCH=$(uname -m)
          if [[ "$ARCH" == "arm64" ]]; then
            PKG_NAME="powershell-${REQUESTED_VERSION}-osx-arm64.pkg"
          else
            PKG_NAME="powershell-${REQUESTED_VERSION}-osx-x64.pkg"
          fi
          URL="https://github.com/PowerShell/PowerShell/releases/download/v${REQUESTED_VERSION}/${PKG_NAME}"
          curl -sSL "$URL" -o "$PKG_NAME"
          sudo installer -pkg "$PKG_NAME" -target /
        fi

    - name: Install PowerShell (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      env:
        REQUESTED_VERSION: ${{ inputs.Version }}
      run: |
        Write-Host  "Requested version: [$REQUESTED_VERSION]"
        # Only resolve to latest version if explicitly set to 'latest' (case-insensitive)
        $req = $env:REQUESTED_VERSION
        if ($req -and $req.Trim().ToLower() -eq 'latest') {
            $latest = (Invoke-RestMethod -Uri 'https://api.github.com/repos/PowerShell/PowerShell/releases/latest').tag_name.TrimStart('v')
            Write-Host "Latest stable PowerShell release detected: $latest"
            $env:REQUESTED_VERSION = $latest
        } elseif ([string]::IsNullOrWhiteSpace($req)) {
            Write-Host "Error: Version input is required (or use 'latest')"
            exit 1
        }

        try {
          $detected = (pwsh -NoLogo -NoProfile -Command '$PSVersionTable.PSVersion.ToString()')
        } catch {
          $detected = $null
        }

        Write-Host "Detected PowerShell version: $detected"
        Write-Host "Requested PowerShell version: $env:REQUESTED_VERSION"

        if ($detected -eq $env:REQUESTED_VERSION) {
          Write-Host "PowerShell $detected already installed. Skipping."
          exit 0
        }

        $msi = "PowerShell-$($env:REQUESTED_VERSION)-win-x64.msi"
        $url = "https://github.com/PowerShell/PowerShell/releases/download/v$($env:REQUESTED_VERSION)/$msi"
        Invoke-WebRequest -Uri $url -OutFile $msi -UseBasicParsing
        Start-Process msiexec.exe -ArgumentList '/i', $msi, '/quiet', '/norestart' -Wait
