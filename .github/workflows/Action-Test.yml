name: Action-Test

run-name: "Action-Test - [${{ github.event.pull_request.title }} #${{ github.event.pull_request.number }}] by @${{ github.actor }}"

on:
  workflow_dispatch:
  pull_request:
  schedule:
    - cron: '0 0 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: read

jobs:
  ActionTestBasic:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        version: ['latest', '7.4.7', '7.5.0']
    runs-on: ${{ matrix.os }}
    name: '${{ matrix.os }} - [${{ matrix.version }}]'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Action-Test
        uses: ./
        with:
          Version: ${{ matrix.version }}

      - name: Verify installed version
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          # Requested version that came from the matrix
          $requested = '${{ matrix.version }}'

          # When empty / 'null' / 'latest' → resolve to latest stable release
          if ([string]::IsNullOrWhiteSpace($requested) -or
              $requested.Trim().ToLower() -in @('latest','null')) {

              $requested = (
                Invoke-RestMethod -Uri 'https://api.github.com/repos/PowerShell/PowerShell/releases/latest' `
                -Headers @{
                  'Accept' = 'application/vnd.github+json'
                  'Authorization' = "Bearer $($env:GITHUB_TOKEN)"
                  'X-GitHub-Api-Version' = '2022-11-28'
                }
              ).tag_name.TrimStart('v')
              Write-Host "Resolved 'latest' → $requested"
          }

          # Actual version installed by the action
          $installed = ($PSVersionTable.PSVersion).ToString()
          Write-Host "Installed PowerShell version: $installed"
          Write-Host "Expected  PowerShell version: $requested"

          if ($installed -ne $requested) {
              throw "Failed: expected $requested but got $installed"
          }

  ActionTestDowngrade:
    runs-on: windows-latest
    name: 'Windows Downgrade Test - 7.5.0 → 7.4.7'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # First install a higher version (7.5.0)
      - name: Install PowerShell 7.5.0
        uses: ./
        with:
          Version: 7.5.0

      - name: Verify 7.5.0 is installed
        shell: pwsh
        run: |
          $installed = ($PSVersionTable.PSVersion).ToString()
          Write-Host "Installed PowerShell version: $installed"
          if ($installed -ne "7.5.0") {
              throw "Failed: expected 7.5.0 but got $installed"
          }
          Write-Host "7.5.0 installation verified"

      # Now try to downgrade to a lower version (7.4.7)
      - name: Downgrade to PowerShell 7.4.7
        uses: ./
        with:
          Version: 7.4.7

      - name: Verify 7.4.7 is installed (downgrade test)
        shell: pwsh
        run: |
          $installed = ($PSVersionTable.PSVersion).ToString()
          Write-Host "Installed PowerShell version: $installed"
          if ($installed -ne "7.4.7") {
              throw "Failed: expected 7.4.7 but got $installed (downgrade failed)"
          }
          Write-Host "Downgrade test PASSED!"
